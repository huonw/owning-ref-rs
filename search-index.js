var searchIndex = {};
searchIndex['owning_ref'] = {"items":[[0,"","owning_ref","# An owning reference.",null,null],[3,"OwningRef","","An owning reference.",null,null],[6,"BoxRef","","Typedef of a owning reference that uses a `Box` as the owner.",null,null],[6,"VecRef","","Typedef of a owning reference that uses a `Vec` as the owner.",null,null],[6,"StringRef","","Typedef of a owning reference that uses a `String` as the owner.",null,null],[6,"RcRef","","Typedef of a owning reference that uses a `Rc` as the owner.",null,null],[6,"ArcRef","","Typedef of a owning reference that uses a `Arc` as the owner.",null,null],[6,"ErasedBoxRef","","Typedef of a owning reference that uses an erased `Box` as the owner.",null,null],[8,"StableAddress","","Marker trait for expressing that the memory address of the value\nreachable via a dereference remains identical even if `self` gets moved.",null,null],[8,"CloneStableAddress","","Marker trait for expressing that the memory address of the value\nreachable via a dereference remains identical even if `self` is a clone.",null,null],[8,"Erased","","Helper trait for an erased concrete type an owner dereferences to.\nThis is used in form of a trait object for keeping\nsomething around to (virtually) call the destructor.",null,null],[8,"IntoErased","","Helper trait for erasing the concrete type of what an owner derferences to,\nfor example `Box<T> -> Box<Erased>`. This would be unneeded with\nhigher kinded types support in the language.",null,null],[16,"Erased","","Owner with the dereference type substituted to `Erased`.",0,null],[10,"into_erased","","Perform the type erasure.",0,{"inputs":[{"name":"intoerased"}],"output":{"name":"erased"}}],[11,"new","","Creates a new owning reference from a owner\ninitialized to the direct dereference of it.",1,{"inputs":[{"name":"owningref"},{"name":"o"}],"output":{"name":"self"}}],[11,"map","","Converts `self` into a new owning reference that points at something reachable\nfrom the previous one.",1,{"inputs":[{"name":"owningref"},{"name":"f"}],"output":{"name":"owningref"}}],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",1,{"inputs":[{"name":"owningref"}],"output":{"name":"owningref"}}],[11,"owner","","A getter for the underlying owner.",1,{"inputs":[{"name":"owningref"}],"output":{"name":"o"}}],[11,"into_inner","","Discards the reference and retrieves the owner.",1,{"inputs":[{"name":"owningref"}],"output":{"name":"o"}}],[6,"Target","","",null,null],[11,"deref","","",1,{"inputs":[{"name":"owningref"}],"output":{"name":"t"}}],[11,"as_ref","","",1,{"inputs":[{"name":"owningref"}],"output":{"name":"t"}}],[11,"from","","",1,{"inputs":[{"name":"owningref"},{"name":"o"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"owningref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"owningref"}],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"erased"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Erased","owning_ref","",null,null],[11,"into_erased","alloc::boxed","",3,{"inputs":[{"name":"box"}],"output":{"name":"erased"}}]],"paths":[[8,"IntoErased"],[3,"OwningRef"],[8,"Erased"],[3,"Box"]]};
initSearch(searchIndex);
